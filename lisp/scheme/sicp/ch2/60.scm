(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (cons x set))
(define (mydrop x set)
  (cond ((null? set) '())
        ((equal? x (car set)) (cdr set))
        (else (cons (car set) (mydrop x (cdr set))))))
(define (intersection-set set0 set1)
  (cond ((or (null? set0) (null? set1)) '())
        ((element-of-set? (car set0) set1)
         (adjoin-set (car set0) (intersection-set (cdr set0) (mydrop (car set0) set1))))
        (else (intersection-set (cdr set0) set1))))
(define (union-set set0 set1)
  (append set0 set1))

(displayln (union-set '(1 3 5) '(2 4 6 3)))
(displayln (intersection-set '(1 3 5) '(2 4 6 3)))
(displayln (intersection-set '(1 3 5) '(2 3 3)))
(displayln (intersection-set '(2 3 3) '(1 3 5) ))
