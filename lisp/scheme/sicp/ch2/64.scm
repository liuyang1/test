(define (make-tree entry left right)
  (list entry left right))
(define (list->tree lst)
  (car (partial-tree lst (length lst))))

(define (partial-tree elts n)
  (if (= n 0) (cons '() elts)
    (let ((left-size (quotient (- n 1) 2)))
     (let ((left-result (partial-tree elts left-size)))
      (let ((left-tree (car left-result))
            (non-left-elts (cdr left-result))
            (right-size (- n (+ left-size 1))))
        (let ((this-entry (car non-left-elts))
              (right-result (partial-tree (cdr non-left-elts) right-size)))
          (let ((right-tree (car right-result))
                (remaining-elts (cdr right-result)))
            (cons (make-tree this-entry left-tree right-tree)
                  remaining-elts))))))))

(display (list->tree '(1 3 5 7 9 11)))
