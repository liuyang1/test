(gdb) info reg
eax            0x0      0
ecx            0x0      0
edx            0x1f0    496
ebx            0x10074  65652
esp            0x7bdc   0x7bdc
ebp            0x7bf8   0x7bf8
esi            0x10074  65652
edi            0x0      0
eip            0x10000c 0x10000c
eflags         0x46     [ PF ZF  ]
cs             0x8      8
ss             0x10     16
ds             0x10     16
es             0x10     16
fs             0x0      0
gs             0x0      0
(gdb) x/24x $esp
0x7bdc: 0x00007db4      0x00000000      0x00000000      0x00000000
0x7bec: 0x00000000      0x00000000      0x00000000      0x00000000
0x7bfc: 0x00007c4d      0x8ec031fa      0x8ec08ed8      0xa864e4d0
0x7c0c: 0xb0fa7502      0xe464e6d1      0x7502a864      0xe6dfb0fa
0x7c1c: 0x16010f60      0x200f7c78      0xc88366c0      0xc0220f01
0x7c2c: 0x087c31ea      0x10b86600      0x8ed88e00      0x66d08ec0

- from 0x7c00, it start to run `bootasm.S`.
    This file start first CPU.

0xfe05b: cmpl   $0x0,%cs:0x6c48         compare 0x6c48's value is zero or not
0xfe062: jne    0xfd2e1                 if not eq, then skip to 0xfd2e1
0xfe066: xor    %dx,%dx                 %dx <- 0
0xfe068: mov    %dx,%ss                 %ss <- 0
0xfe06a: mov    $0x7000,%esp            %esp <- $0x7000, init stack
    This line is `movl $start,%esp` in `bootasm.S`
    all zeros on the stack.

0xfe070: mov    $0xf3691,%edx           %edx <- $0xf3691
0xfe076: jmp    0xfd165                 jump to code seg 0xfd165
0xfd165: mov    %eax,%ecx
0xfd168: cli                            disable interrupt
    First instruction in bootblock.asm

